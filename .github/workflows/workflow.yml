name: ServiceNow GitHub Actions Demo

on:
  push:
    branches:
      - master

jobs:
  build:
    # Purpose of this job is to Apply Remote Changes for the branch triggering 
    # the pipeline build to the Dev instance, then publish the application to 
    # app repo using the template versioning format.
    name: Publish from Dev
    runs-on: ubuntu-latest
    # Below line can be used to set conditionals for modifying your pipeline as needed.
    # if: ${{ github.event_name == 'pull_request'}}

    steps:
      - name: pinging the server
        run: curl -I ven05366.service-now.com
        
      - name: ServiceNow CI/CD Apply Changes
        uses: ServiceNow/sncicd-apply-changes@2.0.0
        env:
          nowUsername: ${{ secrets.NOW_USERNAME }}
          nowPassword: ${{ secrets.NOW_PASSWORD }}
          nowSourceInstance: ${{ secrets.NOW_DEV_INSTANCE }}
          appSysID: ${{ secrets.APP_SYS_ID }}
          appScope: ${{ secrets.APP_SCOPE }}
      
      - name: Debug ServiceNow Inputs
        run: |
          echo "SN_INSTANCE_URL: ${{ secrets.SN_INSTANCE_URL }}"
          echo "SN_DEVOPS_USER: ${{ secrets.SN_DEVOPS_USER }}"
          echo "SN_DEVOPS_PASSWORD: ${{ secrets.SN_DEVOPS_PASSWORD }}"
          curl ${{ secrets.SN_INSTANCE_URL }}
    
      - name: ServiceNow CI/CD Instance Scan
        uses: ServiceNow/sncicd-instance-scan@2.0.0
        id: scan
        with:
            scantype: full # point, suite_combo, suite_scoped, suite_update
            #targetTable: <target_table>
            #targetSysId: <target_sys_id>
            #comboSysId: <combo_sys_id>
            #suiteSysId: <suite_sys_id>
            #appScopeSysIds: <app_scope_sys_ids_comma_separated>
            #updateSetSysIds: <update_set_sys_ids_comma_separated>
        env:
            nowUsername: ${{ secrets.NOW_USERNAME }}
            nowPassword: ${{ secrets.NOW_PASSWORD }}
            nowScanInstance: ${{ secrets.NOW_DEV_INSTANCE }}

      - name: ServiceNow DevOps Sonar Scan Results
        uses: ServiceNow/servicenow-devops-sonar@v2.0.0
        with:
          devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
          devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
          instance-url: ${{ secrets.SN_INSTANCE_URL }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          context-github: ${{ toJSON(github) }}
          job-name: 'Build'
          sonar-host-url: ${{ secrets.SONAR_URL }}
          sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}
          
      - name: ServiceNow CI/CD Publish App
        id: publish_app
        uses: ServiceNow/sncicd-publish-app@2.0.1
        with:
          versionTemplate: 1.1
          versionFormat: template
          # Optional, add +X to version number. Default: 1 
          # incrementBy: X
        env:
          nowUsername: ${{ secrets.NOW_USERNAME }}
          nowPassword: ${{ secrets.NOW_PASSWORD }}
          nowSourceInstance: ${{ secrets.NOW_DEV_INSTANCE }}
          appSysID: ${{ secrets.APP_SYS_ID }}
      
    # This is required to pass the version number output from Publish App 
    # to the input for Install App in the next job! This is because the jobs 
    # run on different Linux instances, so without this Install App won't know
    # what to install
    outputs:
      publishversion: ${{ steps.publish_app.outputs.newVersion }}
          
  test:
    # Purpose of this job is to Install App from the app repo for the version 
    # published in the build job to a Test instance, then run an ATF Test Suite 
    # associated with the app. If Test Suite fails, the app should be Rolled Back 
    # to clean up the persistent Test environment
    needs: build
    name: Install the application to Test Instance
    runs-on: ubuntu-latest
    # Below line can be used to set conditionals for modifying your pipeline as needed.
    # if: ${{ github.event_name == 'pull_request'}}.
    
    steps:

      - name: ServiceNow CI/CD Install App
        id: install_app
        uses: ServiceNow/sncicd-install-app@2.0.0
        with:
          version: ${{ needs.build.outputs.publishversion }}
          # Only applicable if Application Customization is active. 
          # Version of the base application on which to apply the customizations
          #baseAppVersion: '1.2.3'
          # Only applicable if Application Customization is active and the associated 
          # application is a higher version than the currently installed version
          # Default: false
          autoUpgradeBaseApp: false
        env:
          nowUsername: ${{ secrets.NOW_USERNAME }}
          nowPassword: ${{ secrets.NOW_PASSWORD }}
          nowInstallInstance: ${{ secrets.NOW_TEST_INSTANCE }}
          appSysID: ${{ secrets.APP_SYS_ID }}
